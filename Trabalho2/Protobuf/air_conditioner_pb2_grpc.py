# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import Protobuf.air_conditioner_pb2 as air__conditioner__pb2


class AirConditionerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OnOffAirCond = channel.unary_unary(
                '/SmartOffice.AirConditioner/OnOffAirCond',
                request_serializer=air__conditioner__pb2.RequestAirConditioner.SerializeToString,
                response_deserializer=air__conditioner__pb2.ResponseStatusAirConditioner.FromString,
                )
        self.UpperTemp = channel.unary_unary(
                '/SmartOffice.AirConditioner/UpperTemp',
                request_serializer=air__conditioner__pb2.RequestAirConditioner.SerializeToString,
                response_deserializer=air__conditioner__pb2.ResponseTemperatureAirConditioner.FromString,
                )
        self.LowerTemp = channel.unary_unary(
                '/SmartOffice.AirConditioner/LowerTemp',
                request_serializer=air__conditioner__pb2.RequestAirConditioner.SerializeToString,
                response_deserializer=air__conditioner__pb2.ResponseTemperatureAirConditioner.FromString,
                )


class AirConditionerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def OnOffAirCond(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpperTemp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LowerTemp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AirConditionerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'OnOffAirCond': grpc.unary_unary_rpc_method_handler(
                    servicer.OnOffAirCond,
                    request_deserializer=air__conditioner__pb2.RequestAirConditioner.FromString,
                    response_serializer=air__conditioner__pb2.ResponseStatusAirConditioner.SerializeToString,
            ),
            'UpperTemp': grpc.unary_unary_rpc_method_handler(
                    servicer.UpperTemp,
                    request_deserializer=air__conditioner__pb2.RequestAirConditioner.FromString,
                    response_serializer=air__conditioner__pb2.ResponseTemperatureAirConditioner.SerializeToString,
            ),
            'LowerTemp': grpc.unary_unary_rpc_method_handler(
                    servicer.LowerTemp,
                    request_deserializer=air__conditioner__pb2.RequestAirConditioner.FromString,
                    response_serializer=air__conditioner__pb2.ResponseTemperatureAirConditioner.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SmartOffice.AirConditioner', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AirConditioner(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def OnOffAirCond(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SmartOffice.AirConditioner/OnOffAirCond',
            air__conditioner__pb2.RequestAirConditioner.SerializeToString,
            air__conditioner__pb2.ResponseStatusAirConditioner.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpperTemp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SmartOffice.AirConditioner/UpperTemp',
            air__conditioner__pb2.RequestAirConditioner.SerializeToString,
            air__conditioner__pb2.ResponseTemperatureAirConditioner.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LowerTemp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SmartOffice.AirConditioner/LowerTemp',
            air__conditioner__pb2.RequestAirConditioner.SerializeToString,
            air__conditioner__pb2.ResponseTemperatureAirConditioner.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
